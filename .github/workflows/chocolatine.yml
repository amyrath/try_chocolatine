name: chocolatine
on:
  push:
    branches-ignore:
       - ! 'ga-ignore-*'
  pull_request:
    branches-ignore:
       - ! 'ga-ignore-*'

env:
  MIRROR_URL: git@github.com:amyrath/try_chocolatine.git
  EXECUTABLES: mysh
  BANNED_FUNCTIONS: printf,strcmp,puts,strncmp,strlen,fgets,fputs,fprintf,strtok
  LIBRARIES: <stdio.h>,<string.h>,<unistd.h>,<fcntl.h>,<stdlib.h>,<errno.h>,<starg.h>,<math.h>

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4
      - name: chech coding style
        run: check.sh $(pwd) $(pwd)
      - name: verify the coding style file
        run: |
          if [coding-style-reports.log]; then
            cat coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4
      - name: check the compilation
        run: make
        timeout-minutes: 2
      - name: clean the repot
        run: make clean
      - name: control executable
        run: |
          bash -c '
          for exe in $(echo $EXECUTABLES); do
            if [! -x "$exe"]; then
              echo "execution is fail"
              exit 1
            else
              echo "$executable is working"
            fi
          done
          '

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
       - name: checkout the repository
         uses: actions/checkout@v4
       - name: check the unit tests
         run: make tests_run
         timeout-minutes: 2

  banned_functions:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
       - name: Checkout repository
         uses: actions/checkout@v4
       - name: check the banned functions
         run: |
          grep -rn "(${{ env.BANNED_FUNCTIONS }})" --include=\*.c || true
          if grep -rn "(${{ env.BANNED_FUNCTIONS }})" --include=\*.c; then
            echo "Banned function"
            exit 1
          fi
         timeout-minutes: 2

  push_to_mirror:
    needs: banned_functions
    runs-on: ubuntu-latest
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4
      - name: create the key
        run: |
          mkdir ~/.ssh
          echo "$GIT_SSH_PRIVATE_KEY" > ~/.ssh/stock
          chmod 600 ~/.ssh/stock

  check_libraries:
    runs-on: ubuntu-latest
    needs: push_to_mirror
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Verify compiled libraries
        run: |
          for lib in "${env.LIBRARIES}"; do
            if [ ! -f "$lib" ]; then
              echo "include file=$lib"
              exit 1
            fi
          done
         ## IFS=',' read -ra LIBS <<< ${{ env.LIBRARIES }}
